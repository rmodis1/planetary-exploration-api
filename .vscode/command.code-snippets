{
	"CommandTemplate": {
	  "prefix": "command",
	  "body": [
		"//// Paste these using statements at the top of the file and uncomment them",
		"//using PlanetaryExplorationLogs.API.Data.Context;",
		"//using PlanetaryExplorationLogs.API.Utility.Patterns;",
		"//using System.Net;",
		"//using static PlanetaryExplorationLogs.API.Utility.Patterns.CommandQuery;",
		"",
		"public class ${classname:ClassName}_Command : RequestBase<${returntype:ReturnType}>",
		"{",
		"    private readonly int _someInputParameter;",
		"",
		"    public ${classname}_Command(PlanetExplorationDbContext context, int someInputParameter)",
		"        : base(context)",
		"    {",
		"        _someInputParameter = someInputParameter;",
		"    }",
		"",
		"    // The authorizer, validator, and handler run in that order. If any fail, the query will not be executed.",
		"",
		"    // The authorizer is optional and can be removed if not needed",
		"    public override IAuthorizer Authorizer => new ${classname}_Authorizer(DbContext);",
		"",
		"    // The validator is optional and can be removed if not needed",
		"    public override IValidator Validator =>",
		"        new ${classname}_Validator(DbContext, _someInputParameter);",
		"",
		"    // The handler is mandatory to have for every command",
		"    public override IHandler<${returntype}> Handler =>",
		"        new ${classname}_Handler(DbContext, _someInputParameter);",
		"}",
		"",
		"// The authorizer class is responsible for any additional authorization logic",
		"public class ${classname}_Authorizer : AuthorizerBase",
		"{",
		"    public ${classname}_Authorizer(PlanetExplorationDbContext context)",
		"        : base(context)",
		"    {",
		"    }",
		"",
		"    public override async Task<RequestResult> AuthorizeAsync()",
		"    {",
		"        // Replace with your authorization logic.",
		"        return await AuthorizedResultAsync();",
		"    }",
		"}",
		"",
		"// The validator class is responsible for validating things before the query is executed",
		"public class ${classname}_Validator : ValidatorBase",
		"{",
		"    private readonly int _someInputParameter;",
		"",
		"    public ${classname}_Validator(PlanetExplorationDbContext context, int someInputParameter)",
		"        : base(context)",
		"    {",
		"        _someInputParameter = someInputParameter;",
		"    }",
		"",
		"    public override async Task<RequestResult> ValidateAsync()",
		"    {",
		"        await Task.CompletedTask;",
		"",
		"        if (_someInputParameter < 0)",
		"        {",
		"            return await InvalidResultAsync(",
		"                HttpStatusCode.BadRequest,",
		"                \"The input parameter needs to be greater than zero for some reason.\");",
		"        }",
		"",
		"        return await ValidResultAsync();",
		"    }",
		"}",
		"",
		"// The handler class is responsible for executing the query",
		"public class ${classname}_Handler : HandlerBase<${returntype}>",
		"{",
		"    private readonly int _someInputParameter;",
		"",
		"    public ${classname}_Handler(PlanetExplorationDbContext context, int someInputParameter)",
		"        : base(context)",
		"    {",
		"        _someInputParameter = someInputParameter;",
		"    }",
		"",
		"    public override async Task<RequestResult<${returntype}>> HandleAsync()",
		"    {",
		"        await Task.CompletedTask;",
		"",
		"        var mathematical = _someInputParameter * _someInputParameter;",
		"",
		"        var result = new RequestResult<${returntype}>",
		"        {",
		"            Data = mathematical",
		"        };",
		"",
		"        return result;",
		"    }",
		"}"
	  ],
	  "description": "Code snippet for a command template"
	}
  }
  